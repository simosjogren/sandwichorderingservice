# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

# After you have Docker and Docker Compose installed,
# and this file is ready, you use this file and run it with:
# `docker-compose up --build`

version: "3"

services:
  # An example configuration of server A for groups' convenience.
  # server-a is based on the Docker image the groups produce and build themselves.

  frontend:
    image: sjb/node:10-frontend
    build:
      dockerfile: Dockerfile
      context: ./frontend/SandwhichUI
    ports:
      - "3000:3000"
    networks:
      - backend

  server-a:
    # Change the image information to match your server A image
    image: sjb/node:10-servera
    # 'depends_on' and 'command' are  to be used when used
    # with RabbitMQ service in this file. 'depends_on' must be set
    # to RabbitMQ service's name from this file, and 'command'
    # can be modified to be anything, but what is given should
    # work. Just uncomment them
    # depends_on:
    #   -  rapid-runner-rabbit
    # command: ["./utils/wait-for-it.sh", "rapid-runner-rabbit:5672", "--",  "npm", "start"]
    build:
      dockerfile: Dockerfile
      context:  ./backend/server-a
    # We map 8080 -> 8080 in and out of docker. 
    ports:
      - "8080:8080"
    environment:
        FRONTEND_ADDRESS: http://127.0.0.1:5173
        POSTGRES_USER: myuser
        POSTGRES_PASSWORD: mypassword
        POSTGRES_HOST: db
        POSTGRES_PORT: 5432
        POSTGRES_DB: postgres_db
        RABBITMQ_HOST: rapid-runner-rabbit
        RABBITMQ_PORT: '5672'
        RABBITMQ_USER: guest
        RABBITMQ_PASS: guest
    restart: always
    networks:
      - backend
  # You can base this service on the rabbitmq:3-management Docker Hub image.
  # You need to expose the RabbitMQ port 5672 to other containers
  # in this  docker-compose.yml, and for the managent from a Web
  # server you needs to make the map the RabbitMQ container port
  # 15672 to host port you wish to use for this.
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD the set of instructions as they see fit.
  rapid-runner-rabbit:
     image: rabbitmq:3-management
     ports:
      - "5672:5672"
      - "15672:15672"
     networks:
      - backend

  # much of the server-b service entry can be copied from server-a
  # service above. server-b directory Dockerfile has more
  # information.
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD this set of instructions as they see fit.
  server-b:
      image: sjb/node:10-serverb
      depends_on: 
        - rapid-runner-rabbit
      build:
        dockerfile: Dockerfile
        context: ./backend/server-b
      environment:
        RABBITMQ_HOST: rapid-runner-rabbit
        RABBITMQ_PORT: '5672'
        RABBITMQ_USER: guest
        RABBITMQ_PASS: guest
        POSTGRES_USER: myuser
        POSTGRES_PASSWORD: mypassword
        POSTGRES_HOST: db
        POSTGRES_PORT: 5432
        POSTGRES_DB: postgres_db
      networks:
        - backend

  # Your group might want to use a database to store some data
  # You can use any database you wish, PostgreSQL, MySQL and
  # MongoDB have rather good Docker documentation and examples.
  # But some groups could find a way to do this without
  # databases (but I could not :-) )
  # database-service would go here.
  db:
    image: postgres:15-alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_USER=myuser
    networks:
      - backend

  # Here we create a named network, that all the backend components
  # must be added to for them to be able to communicate through
  # exposed ports.
networks:
  backend:

# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
volumes:
  db-data: